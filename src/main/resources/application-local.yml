spring:
  config:
    import:
      - optional:file:./.env.local[.properties]
      - optional:file:./.env[.properties]

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DB_URL}
    username: ${DB_USER}
    password: ${DB_PASSWORD}

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update

  flyway:
    enabled: false

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}

  mail:
    host: ${MAIL_HOST:}          #Gmail의 SMTP 서버 주소
    port: ${MAIL_PORT:0}             #Gmail SMTP 서버가 사용하는 STARTTLS 포트 번호
    username: ${EMAIL_USERNAME}   #메일을 보내는 계정의 이메일 주소
    password: ${EMAIL_PASSWORD}   #메일을 보내는 계정의 비밀번호
    properties:
      mail.smtp.auth: false        #SMTP 인증을 사용
      mail.smtp.starttls.enable: false   #STARTTLS는 일반 연결을 암호화된 연결로 전환하는 기능

  docker:
    compose:
      enabled: true       # 감지/시작
      file: "E:/gamemanager/dailyquest/compose.yml"  # 위치
      lifecycle-management: start-only  # 개발 중엔 컨테이너 계속 살려두고 싶으면 주석 해제

logging:
  level:
    root: INFO
    org.springframework: INFO
    org.hibernate.SQL: DEBUG
    org.springframework.security: INFO
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

api:
  base-url: http://localhost:8080/api


#cors:
#    allowed-methods: GET,POST,PUT,PATCH,DELETE,OPTIONS
#    allowed-headers: "*"
#    exposed-headers: ["Location","Set-Cookie"]
#    max-age-seconds: 3600
#    allow-credentials: true

jwt:
    issuer: ${JWT_ISSUER}
    secret: ${JWT_SECRET}
    refresh:
      secret: ${JWT_REFRESH_SECRET}
    access-ttl: ${JWT_ACCESS_TTL}
    refresh-ttl: ${JWT_REFRESH_TTL}
    expiration: 3600000

security:
  login-limit:
    account-window-seconds: 600
    account-soft-threshold: 5
    account-soft-lock-seconds: 900
    account-hard-threshold: 10
    account-hard-lock-seconds: 43200
    ip-window-seconds: 600
    ip-threshold: 20
    ip-cooldown-seconds: 3600

server:
  port: 8080
  servlet:
    session:
      cookie:
        same-site: lax   # 로컬에선 lax 권장(HTTPS가 아닐 수 있어서)

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: always

springdoc:
    api-docs:
      enabled: true
    swagger-ui:
      enabled: true

