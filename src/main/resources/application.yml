spring:
  application:
    name: dailyquest

  profiles:
    active: local

  config:
    import: optional:file:.env[.properties]

  datasource:
    url: jdbc:mysql://localhost:3306/dailyquest
    username: hoje
    password: ${DB_PASSWORD}
    hikari:
      initialization-fail-timeout: 60000   # DB 준비 60초까지 기다림
      connection-timeout: 30000

  jpa:
    hibernate:
        ddl-auto: update
    show-sql: true  #실행 중인 JPA SQL 쿼리문을 콘솔에 출력

  data:
    redis:
        host: localhost         # 운영/스테이징에서는 실제 호스트/엔드포인트
        port: 6379

  docker:
    compose:
        enabled: true       # 감지/시작
        file: "E:/gamemanager/dailyquest/compose.yml"  # 위치
        lifecycle-management: start-only  # 개발 중엔 컨테이너 계속 살려두고 싶으면 주석 해제

  mail:
    host: smtp.gmail.com  #Gmail의 SMTP 서버 주소
    port: 587             #Gmail SMTP 서버가 사용하는 STARTTLS 포트 번호
    username: ${EMAIL_USERNAME}   #메일을 보내는 계정의 이메일 주소
    password: ${EMAIL_PASSWORD}   #메일을 보내는 계정의 비밀번호
    properties:
      mail.smtp.auth: true        #SMTP 인증을 사용
      mail.smtp.starttls.enable: true   #STARTTLS는 일반 연결을 암호화된 연결로 전환하는 기능
  web:
    resources:
      cache:
        cachecontrol:
          max-age: 365d
      chain:
        enabled: true
        strategy:
          content:
            enabled: true
            paths: "/**"
  jwt:
    issuer: ${JWT_ISSUER}
    secret: ${JWT_SECRET}
    access-secret: ${JWT_SECRET}           # .env에 이미 존재
    refresh-secret: ${JWT_REFRESH_SECRET}  # .env에 이미 존재
    access-ttl: ${JWT_ACCESS_TTL}
    refresh-ttl: ${JWT_REFRESH_TTL}
    expiration: 3600000

  server:
    port: 8080
    servlet:
      session:
        cookie:
          same-site: none   # Refresh 쿠키 전략과 일치
      forward-headers-strategy: framework  # 프록시/HTTPS 헤더 신뢰
  security:
    login-limit:
      account-window-seconds: 600      # 계정 실패 집계 윈도우(10분)
      account-soft-threshold: 5        # 소프트락(캡차/지연/임시락 전 단계) 기준
      account-soft-lock-seconds: 900   # 소프트락 유지(15분)
      account-hard-threshold: 10       # 하드락 기준
      account-hard-lock-seconds: 43200 # 하드락 유지(12시간)

      ip-window-seconds: 600           # IP 집계 윈도우(10분)
      ip-threshold: 20                 # IP 과도 실패 기준
      ip-cooldown-seconds: 3600        # IP 쿨다운(1시간)

    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/google"
            scope: [ "profile", "email" ]
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            scope: [ "profile_nickname", "account_email" ]
            provider: "kakao"
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/naver"
            scope: [ "name", "email" ]
            provider: "naver"
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
  app:
    cors:
      allowed-origins:
        - https://your-frontend.example.com
        - http://localhost:3000
  logging:
    level:
      org.springframework: INFO
      org.hibernate.SQL: DEBUG
      org.springframework.security: INFO
  springdoc:
    api-docs:
      enabled: true
    swagger-ui:
      enabled: true
  management:
    endpoints.web.exposure.include: health,metrics
    endpoint.health.show-details: always

